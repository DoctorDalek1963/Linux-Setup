#!/usr/bin/env bash

FILES="$( cd $(dirname $0)/Files && pwd )"

CheckWithWhichAndInstallWithAPT() {
	# Redirect stdout and stderr to /dev/null to avoid outputting anything to the terminal
	which $1 &> /dev/null || sudo apt install -y $1
}

OptionalMkdir() {
	# If the directory doesn't exist, make it
	if [ ! -d "$1" ]; then
		mkdir -p -- "$1"
	fi
}

GetFontZip() {
	wget "$1"
	OptionalMkdir ~/.fonts
	unzip -u -j "$2" -d ~/.fonts
	rm "$2"
}

AllFonts() {
	# Hack
	GetFontZip https://github.com/source-foundry/Hack/releases/download/v3.003/Hack-v3.003-ttf.zip Hack-v3.003-ttf.zip
	# Hack Nerd Font
	GetFontZip https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Hack.zip Hack.zip
}

AllFiles() {
	ln -sf $FILES/.vimrc ~/.vimrc
	ln -sf $FILES/.ideavimrc ~/.ideavimrc
	ln -sf $FILES/.bash_aliases ~/.bash_aliases && source ~/.bash_aliases
	ln -sf $FILES/.bashrc ~/.bashrc && source ~/.bashrc
	ln -sf $FILES/.gitconfig ~/.gitconfig
	ln -sf $FILES/.tern-config ~/.tern-config
	ln -sf $FILES/.pylintrc ~/.pylintrc
	ln -sf $FILES/.XCompose ~/.XCompose

	OptionalMkdir ~/.ipython/profile_default
	ln -sf $FILES/ipython_config.py ~/.ipython/profile_default/ipython_config.py

	OptionalMkdir ~/.julia/config
	ln -sf $FILES/startup.jl ~/.julia/config/startup.jl

	OptionalMkdir ~/.sage
	ln -sf $FILES/init.sage ~/.sage/init.sage

	OptionalMkdir ~/.config/neofetch
	ln -sf $FILES/neofetch_config ~/.config/neofetch/config.conf

	OptionalMkdir ~/.config/terminator
	ln -sf $FILES/terminator_config ~/.config/terminator/config

	OptionalMkdir ~/.config/nvim
	ln -sf $FILES/init.vim ~/.config/nvim/init.vim
	ln -sf $FILES/coc-settings.json ~/.config/nvim/coc-settings.json

	OptionalMkdir ~/.config/nvim/lua
	ln -sf $FILES/plugins.lua ~/.config/nvim/lua/plugins.lua

	rm -rf ~/.config/nvim/UltiSnips
	ln -sf $FILES/UltiSnips ~/.config/nvim/
}

MiscSoftware() {
	CheckWithWhichAndInstallWithAPT neofetch
	CheckWithWhichAndInstallWithAPT terminator
	CheckWithWhichAndInstallWithAPT bat

	which fuck &> /dev/null || sudo pip3 install thefuck

	which exa &> /dev/null
	if [ $? -ne 0 ]; then
		# Install rustup if necessary
		which rustc &> /dev/null
		if [ $? -ne 0 ]; then
			curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
		fi

		cargo install exa
	fi

	which unimatrix &> /dev/null
	if [ $? -eq 0 ]; then
		sudo curl -L https://raw.githubusercontent.com/will8211/unimatrix/master/unimatrix.py -o /usr/local/bin/unimatrix
		sudo chmod a+rx /usr/local/bin/unimatrix
	fi
}

InstallNvimPacker() {
	if [ ! -d ~/.local/share/nvim/site/pack/packer/start/packer.nvim ]; then
		git clone --depth 1 https://github.com/wbthomason/packer.nvim ~/.local/share/nvim/site/pack/packer/start/packer.nvim
	fi
}

InstallAndUpdateVimPlugins() {
	nvim --headless -c "PackerCompile" -c "PackerClean" -c "PackerInstall" -c "PackerUpdate" -c "qa!"
}

InstallLanguageServers() {
	npm i -g bash-language-server
	npm install -g dockerfile-language-server-nodejs
	which ghcup &> /dev/null && ghcup install hls
	which julia &> /dev/null && julia -e "using Pkg;Pkg.add(\"LanguageServer\");Pkg.add(\"SymbolServer\");Pkg.add(\"StaticLint\")"
	pip install 'python-language-server[all]'
	CheckWithWhichAndInstallWithAPT ccls
}

if [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
	echo
	echo "$(<Files/setup_help)" # Read the help from a file. This is in quotes to allow for line breaks
	echo
	exit 0
fi

# If no arguments are supplied
if [ $# -eq 0 ]; then
	echo "setup must be suplied with at least one valid argument. See --help or -h for all arguments."
	exit 1
fi

# This is just a big ol' switch statement
while [ $# -ne 0 ]; do
	case "$1" in
		'all')
			AllFiles

			MiscSoftware

			AllFonts

			InstallNvimPacker

			InstallAndUpdateVimPlugins

			InstallLanguageServers
			exit
		;;

		'files')
			AllFiles
			shift
			continue
		;;

		'misc-software')
			MiscSoftware
			shift
			continue
		;;

		'fonts')
			AllFonts
			shift
			continue
		;;

		'vim-plugins')
			InstallNvimPacker

			InstallAndUpdateVimPlugins

			shift
			continue
		;;

		########## Files
		'vimrc')
			ln -sf $FILES/.vimrc ~/.vimrc
			shift
			continue
		;;

		'ideavimrc')
			ln -sf $FILES/.ideavimrc ~/.ideavimrc
			shift
			continue
		;;


		'bash-aliases')
			ln -sf $FILES/.bash_aliases ~/.bash_aliases && source ~/.bash_aliases
			shift
			continue
		;;

		'bashrc')
			ln -sf $FILES/.bashrc ~/.bashrc && source ~/.bashrc
			shift
			continue
		;;

		'gitconfig')
			ln -sf $FILES/.gitconfig ~/.gitconfig
			shift
			continue
		;;

		'tern-config')
			ln -sf $FILES/.tern-config ~/.tern-config
			shift
			continue
		;;

		'pylintrc')
			ln -sf $FILES/.pylintrc ~/.pylintrc
			shift
			continue
		;;

		'xcompose')
			ln -sf $FILES/.XCompose ~/.XCompose
			shift
			continue
		;;

		'ipython-config')
			OptionalMkdir ~/.ipython/profile_default
			ln -sf $FILES/ipython_config.py ~/.ipython/profile_default/ipython_config.py
			shift
			continue
		;;

		'startup.jl')
			OptionalMkdir ~/.julia/config
			ln -sf $FILES/startup.jl ~/.julia/config/startup.jl
			shift
			continue
		;;

		'init.sage')
			OptionalMkdir ~/.sage
			ln -sf $FILES/init.sage ~/.sage/init.sage
			shift
			continue
		;;

		'neofetch-config')
			OptionalMkdir ~/.config/neofetch
			ln -sf $FILES/neofetch_config ~/.config/neofetch/config.conf
			shift
			continue
		;;

		'terminator-config')
			OptionalMkdir ~/.config/terminator
			ln -sf $FILES/terminator_config ~/.config/terminator/config
			shift
			continue
		;;

		'init.vim')
			OptionalMkdir ~/.config/nvim
			ln -sf $FILES/init.vim ~/.config/nvim/init.vim
			shift
			continue
		;;

		'coc-settings')
			OptionalMkdir ~/.config/nvim
			ln -sf $FILES/coc-settings.json ~/.config/nvim/coc-settings.json
			shift
			continue
		;;

		'plugins.lua')
			OptionalMkdir ~/.config/nvim/lua
			ln -sf $FILES/plugins.lua ~/.config/nvim/lua/plugins.lua
			shift
			continue
		;;

		'vim-ultisnips')
			rm -rf ~/.config/nvim/UltiSnips
			ln -sf $FILES/UltiSnips ~/.config/nvim/
			shift
			continue
		;;

		########## Misc Software
		'install-neofetch')
			CheckWithWhichAndInstallWithAPT neofetch
			shift
			continue
		;;

		'install-terminator')
			CheckWithWhichAndInstallWithAPT terminator
			shift
			continue
		;;

		'install-bat')
			CheckWithWhichAndInstallWithAPT bat
			shift
			continue
		;;

		'install-fuck')
			which fuck &> /dev/null || sudo pip3 install thefuck
			shift
			continue
		;;

		'install-exa')
			which exa &> /dev/null
			if [ $? -ne 0 ]; then
				# Install rustup if necessary
				which rustc &> /dev/null
				if [ $? -ne 0 ]; then
					curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
				fi

				cargo install exa
			fi
		;;

		'install-unimatrix')
			which unimatrix &> /dev/null
			if [ $? -eq 0 ]; then
				sudo curl -L https://raw.githubusercontent.com/will8211/unimatrix/master/unimatrix.py -o /usr/local/bin/unimatrix
				sudo chmod a+rx /usr/local/bin/unimatrix
			fi
		;;

		########## Plugins
		'install-nvim-packer')
			InstallNvimPacker
			shift
			continue
		;;

		'install-and-update-vim-plugins')
			InstallAndUpdateVimPlugins
			shift
			continue
		;;

		'install-language-servers')
			InstallLanguageServers
			shift
			continue
		;;

		*)
			echo "'$1' is not a recognised argument. See --help or -h for all recognised arguments."
			shift
			continue
		;;

	esac
done
